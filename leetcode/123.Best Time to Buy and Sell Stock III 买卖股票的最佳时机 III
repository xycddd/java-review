Say you have an array for which the ith element is the price of a given stock on day i.<br>
Design an algorithm to find the maximum profit. You may complete at most two transactions.<br>

**Note:**<br>
You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).<br>

Example 1:<br>
Input: [3,3,5,0,0,3,1,4]<br>
Output: 6<br>
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.<br>
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.<br>
Example 2:<br>
Input: [1,2,3,4,5]<br>
Output: 4<br>
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are<br>
             engaging multiple transactions at the same time. You must sell before buying again.<br>
Example 3:<br>

Input: [7,6,4,3,1]<br>
Output: 0<br>
Explanation: In this case, no transaction is done, i.e. max profit = 0.<br>
**算法解析**:
https://www.cnblogs.com/grandyang/p/4281975.html<br>

```
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        if (prices.empty()) return 0;
        int n = prices.size();
        vector<vector<int>> g(n,vector<int>(3,0)),l(n,vector<int>(3,0));
        for (int i = 1; i < prices.size(); ++i) {
            int diff = prices[i] - prices[i - 1];
            for (int j = 1; j <= 2; ++j) {
                l[i][j] = max(g[i - 1][j - 1] + max(diff, 0), l[i - 1][j] + diff);
                g[i][j] = max(l[i][j], g[i - 1][j]);
            }
        }
        return g[n - 1][2];
    }
};
```
 
